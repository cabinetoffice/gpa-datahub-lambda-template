AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    {{ cookiecutter.project_name }}

Globals: # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html
    Function:
        Timeout: 5
        MemorySize: 256
        Runtime: python3.9
        Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
{%- if cookiecutter.include_safe_deployment == "y" %}
        AutoPublishAlias: live # More info about Safe Deployments: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-deploymentpreference.html
        DeploymentPreference:
            Type: Linear10PercentEvery1Minute {% endif %}
        # Embed Lambda Powertools as a shared Layer
        # See: https://awslabs.github.io/aws-lambda-powertools-python/latest/#lambda-layer
        Layers: # 
            - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPython:9
        Environment:
            Variables:
                # Powertools env vars: https://awslabs.github.io/aws-lambda-powertools-python/#environment-variables
                LOG_LEVEL: INFO
                POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1
                POWERTOOLS_LOGGER_LOG_EVENT: true
                POWERTOOLS_METRICS_NAMESPACE: MyServerlessApplication
                POWERTOOLS_SERVICE_NAME: hello

Parameters:
    ProjectName:
        Type: String
        Description: 'Enter the Project Name'
        Default: > 
            {{ cookiecutter.project_name }}
    DeploymentEnvironment:
        Type: String
        Description: 'Enter the Environment for the Function'
        Default: local
        AllowedValues:
            - local
            - dev
            - stage
            - prod

Mappings:
    Environments:
        local:
            pygpaloggingversion: 2
        dev:
            pygpaloggingversion: 1
        stage:
            pygpaloggingversion: 1
        prod:
            pygpaloggingversion: 1

Resources:
    HelloWorldFunction:
        Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
        Properties:
            Handler: app.lambda_handler
            CodeUri: src/hello_world
            Description: Hello World function
            # Policies: # Example inline policy
            #     - Version: "2012-10-17"
            #     Statement:
            #         - Effect: "Allow"
            #         Action:
            #             - "ssm:GetParameter"
            #         Resource:
            #             - "*"
            VpcConfig:
                SecurityGroupIds:
                    - {% raw %}!Sub '{{resolve:secretsmanager:${ProjectName}/VPCInfo/${DeploymentEnvironment}:SecretString:lambdaoutbound-sg}}'{% endraw %}
                SubnetIds:
                    - {% raw %}!Sub '{{resolve:secretsmanager:${ProjectName}/VPCInfo/${DeploymentEnvironment}:SecretString:privatesubnet}}'{% endraw %}
                    - {% raw %}!Sub '{{resolve:secretsmanager:${ProjectName}/VPCInfo/${DeploymentEnvironment}:SecretString:privatesubnet2}}'{% endraw %}
            Environment:
                Variables:
                    CustomerName: !Ref CustomerName
                    ProjectName: !Ref ProjectName
                    DeploymentEnvironment: !Ref DeploymentEnvironment
            Layers:
                - !Sub
                    - 'arn:aws:lambda:eu-west-2:${AWS::AccountId}:layer:pygpalogging:${pygpaloggingVersion}'
                    - { pygpaloggingVersion: !FindInMap [ Environments, !Ref DeploymentEnvironment, pygpaloggingversion ] }
            Tags:
                LambdaPowertools: python

    SampleBucket:
        Type: 'AWS::S3::Bucket'
        Properties:
            BucketName: {% raw %}!Sub '${ProjectName}-samplebucket-${DeploymentEnvironment}'{% endraw %}
            AccessControl: Private
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: false
                IgnorePublicAcls: true
                RestrictPublicBuckets: true
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    - ServerSideEncryptionByDefault:
                          SSEAlgorithm: AES256
            IntelligentTieringConfigurations:
                - Id: GlacierTieringTransition
                  Status: Enabled
                  Tierings:
                      - Days: 90
                        AccessTier: ARCHIVE_ACCESS

    SampleSQS:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: {% raw %}!Sub '${ProjectName}-samplesqs-${DeploymentEnvironment}'{% endraw %}
            VisibilityTimeout: 660
            DelaySeconds: 120

    SampleRole:
        Type: 'AWS::IAM::Role'
        Properties:
            RoleName: !Sub '${ProjectName}-samplerole-${DeploymentEnvironment}'
            Description: 'This is a sample role'
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - 'sts:AssumeRole'
            Path: /
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/SecretsManagerReadWrite
                - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
                - arn:aws:iam::aws:policy/AmazonS3FullAccess
                - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess
                - arn:aws:iam::aws:policy/AmazonSNSFullAccess
                - arn:aws:iam::aws:policy/AmazonSQSFullAccess
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaRole

    # Sample policy to add additional permissions to your Lambda
    # HelloWorldFunctionAdditionalPermission:
    #     Type: "AWS::IAM::Policy"
    #     Properties:
    #         PolicyName: "root"
    #         PolicyDocument:
    #             Version: "2012-10-17"
    #             Statement:
    #                 -
    #                     Effect: "Allow"
    #                     Action: "ssm:GetParameters"
    #                     Resource: "*"
    #         Roles:
    #             - !Ref HelloWorldFunctionRole # Sample policy to demonstrate Implicit IAM Role created with SAM

Outputs:
    HelloWorldFunction:
      Description: "Hello World Lambda Function ARN"
      Value: !GetAtt HelloWorldFunction.Arn

    SampleBucketName:
        Description: "S3 Sample bucket"
        Value: !Ref SampleBucket

    SampleSQS:
        Description: "SQS Sample"
        Value: !Ref SampleSQS