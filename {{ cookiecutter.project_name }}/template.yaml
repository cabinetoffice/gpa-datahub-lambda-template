AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    {{ cookiecutter.project_name }}

Globals: # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html
    Function:
        Timeout: 5
        MemorySize: 256
        Runtime: python3.9
        Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
{%- if cookiecutter.include_safe_deployment == "y" %}
        AutoPublishAlias: live # More info about Safe Deployments: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-deploymentpreference.html
        DeploymentPreference:
            Type: Linear10PercentEvery1Minute {% endif %}
        # Embed Lambda Powertools as a shared Layer
        # See: https://awslabs.github.io/aws-lambda-powertools-python/latest/#lambda-layer
        Layers: # 
            - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPython:9
        Environment:
            Variables:
                # Powertools env vars: https://awslabs.github.io/aws-lambda-powertools-python/#environment-variables
                LOG_LEVEL: INFO
                POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1
                POWERTOOLS_LOGGER_LOG_EVENT: true
                POWERTOOLS_METRICS_NAMESPACE: MyServerlessApplication
                POWERTOOLS_SERVICE_NAME: hello

Parameters:
    ProjectName:
        Type: String
        Description: 'Enter the Project Name'
        Default: > 
            {{ cookiecutter.project_name }}
    DeploymentEnvironment:
        Type: String
        Description: 'Enter the Environment for the Function'
        Default: local
        AllowedValues:
            - local
            - dev
            - stage
            - prod
    OIDCArn:
        Type: String
        Description: 'ARN of the OIDC connection'
        Default: > 
            {{ cookiecutter.oidc_arn }}
    DeploymentRepo:
        Type: String
        Description: 'Org and Repository name'
        Default: > 
            {{ cookiecutter.deployment_repo }}
    SamCliSourceBucket:
        Type: String
        Description: 'Sam CLI default s3 bucket'
        Default: >
            {{ cookiecutter.sam_cli_source_bucket }}

Mappings:
    Environments:
        local:
            pygpaloggingversion: 2
        dev:
            pygpaloggingversion: 1
        stage:
            pygpaloggingversion: 1
        prod:
            pygpaloggingversion: 1

Resources:
        HelloWorldFunction:
        Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
        Properties:
            FunctionName: !Sub '${ProjectName}-${DeploymentEnvironment}'
            Handler: app.lambda_handler
            CodeUri: src/hello_world
            Description: Hello World function
            # Policies: # Example inline policy
            #     - Version: "2012-10-17"
            #     Statement:
            #         - Effect: "Allow"
            #         Action:
            #             - "ssm:GetParameter"
            #         Resource:
            #             - "*"
            VpcConfig:
                SecurityGroupIds:
                    - {% raw %}!Sub '{{resolve:secretsmanager:${ProjectName}/VPCInfo/${DeploymentEnvironment}:SecretString:lambdaoutbound-sg}}'{% endraw %}
                SubnetIds:
                    - {% raw %}!Sub '{{resolve:secretsmanager:${ProjectName}/VPCInfo/${DeploymentEnvironment}:SecretString:privatesubnet}}'{% endraw %}
                    - {% raw %}!Sub '{{resolve:secretsmanager:${ProjectName}/VPCInfo/${DeploymentEnvironment}:SecretString:privatesubnet2}}'{% endraw %}
            Environment:
                Variables:
                    ProjectName: !Ref ProjectName
                    DeploymentEnvironment: !Ref DeploymentEnvironment
            Layers:
                - !Sub
                    - 'arn:aws:lambda:eu-west-2:${AWS::AccountId}:layer:pygpalogging:${pygpaloggingVersion}'
                    - { pygpaloggingVersion: !FindInMap [ Environments, !Ref DeploymentEnvironment, pygpaloggingversion ] }
            Tags:
                Env: !Sub '${DeploymentEnvironment}'
                ManagedBy: 'Cloudformation'
                Owner: 'Thomas Anderson'
                ApplicationRole: 'My Sample Application'
                # Name is intentionally not included here - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html#aws-resource-lambda-function-properties

    SampleBucket:
        Type: 'AWS::S3::Bucket'
        Properties:
            BucketName: {% raw %}!Sub '${ProjectName}-samplebucket-${DeploymentEnvironment}'{% endraw %}
            AccessControl: Private
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: false
                IgnorePublicAcls: true
                RestrictPublicBuckets: true
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    - ServerSideEncryptionByDefault:
                          SSEAlgorithm: AES256
            IntelligentTieringConfigurations:
                - Id: GlacierTieringTransition
                  Status: Enabled
                  Tierings:
                      - Days: 90
                        AccessTier: ARCHIVE_ACCESS
            Tags:
                - Key: 'Env'
                  Value: !Sub '${DeploymentEnvironment}'
                - Key: 'ManagedBy'
                  Value: 'Cloudformation'
                - Key: 'Owner'
                  Value: 'Thomas Anderson'
                - Key: 'ApplicationRole'
                  Value: 'My Sample Application'
                - Key: 'Name'
                  Value: {% raw %}!Sub '${ProjectName}-samplebucket-${DeploymentEnvironment}'{% endraw %}


    SampleSQS:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: {% raw %}!Sub '${ProjectName}-samplesqs-${DeploymentEnvironment}'{% endraw %}
            VisibilityTimeout: 660
            DelaySeconds: 120
            Tags:
                - Key: 'Env'
                  Value: !Sub '${DeploymentEnvironment}'
                - Key: 'ManagedBy'
                  Value: 'Cloudformation'
                - Key: 'Owner'
                  Value: 'Thomas Anderson'
                - Key: 'ApplicationRole'
                  Value: 'My Sample Application'
                - Key: 'Name'
                  Value: { % raw % }!Sub '${ProjectName}-samplebucket-${DeploymentEnvironment}'{ % endraw % }

    PipelineRole:
        Type: 'AWS::IAM::Role'
        Properties:
            RoleName: !Sub '${ProjectName}-pipeline-${DeploymentEnvironment}'
            Description: !Sub 'Pipeline role for ${ProjectName} ${DeploymentEnvironment}'
            AssumeRolePolicyDocument: !Sub
                - |
                    {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Principal": {
                                    "Federated": "${OIDCArn}"
                                },
                                "Action": "sts:AssumeRoleWithWebIdentity",
                                "Condition": {
                                    "ForAllValues:StringLike": {
                                        "token.actions.githubusercontent.com:aud": "sts.amazonaws.com",
                                        "token.actions.githubusercontent.com:sub": "repo:${DeploymentRepo}:ref:refs/heads/${DeploymentEnvironment}"
                                    }
                                }
                            }
                        ]
                    }
                - DeploymentEnvironment: !Ref DeploymentEnvironment
                - OIDCArn: !Ref OIDCArn
                - DeploymentRepo: !Ref DeploymentRepo
            Path: /
            Policies:
                - PolicyName: !Sub 'Pipeline${ProjectName}${DeploymentEnvironment}'
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - 'iam:GetRole'
                                - 'iam:PutRolePolicy'
                                - 'iam:DeleteRolePolicy'
                                - 'lambda:ListTags'
                            Resource: '*'
                          - Effect: Allow
                            Action:
                                - 'lambda:UpdateFunctionCode'
                            Resource: !GetAtt HelloWorldFunction.Arn
                          - Effect: Allow
                            Action:
                                - "cloudformation:CreateChangeSet"
                                - "cloudformation:DescribeChangeSet"
                                - "cloudformation:ExecuteChangeSet"
                                - "cloudformation:DeleteStack"
                                - "cloudformation:DescribeStackEvents"
                                - "cloudformation:DescribeStacks"
                                - "cloudformation:GetTemplate"
                                - "cloudformation:GetTemplateSummary"
                                - "cloudformation:DescribeStackResource"
                            Resource: '*'
                          - Effect: Allow
                            Action:
                                - "s3:DeleteObject"
                                - "s3:GetObject*"
                                - "s3:PutObject*"
                                - "s3:GetBucket*"
                                - "s3:List*"
                            Resource:
                                - !Sub "${SamCliSourceBucket}/*"
                                - !Sub "${SamCliSourceBucket}"
            Tags:
                - Key: 'Env'
                  Value: !Sub '${DeploymentEnvironment}'
                - Key: 'ManagedBy'
                  Value: 'Cloudformation'
                - Key: 'Owner'
                  Value: 'Mike Bell'
                - Key: 'ApplicationRole'
                  Value: 'Example Lambda'
                - Key: 'Name'
                  Value: !Sub '${ProjectName}-pipeline-${DeploymentEnvironment}'
Outputs:
    HelloWorldFunction:
      Description: "Hello World Lambda Function ARN"
      Value: !GetAtt HelloWorldFunction.Arn

    SampleBucketName:
        Description: "S3 Sample bucket"
        Value: !Ref SampleBucket

    SampleSQS:
        Description: "SQS Sample"
        Value: !Ref SampleSQS